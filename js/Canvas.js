// Generated by CoffeeScript 1.3.3
(function() {

  window.Canvas = (function() {

    function Canvas(id, pixelSize, rand) {
      var cell, i, j, temp, _i, _j, _ref, _ref1;
      this.id = id;
      this.pixelSize = pixelSize != null ? pixelSize : 5;
      this.rand = rand != null ? rand : 0.8;
      this.canvas = document.getElementById(this.id);
      this.context = this.canvas.getContext('2d');
      this.width = this.canvas.width / this.pixelSize;
      this.height = this.canvas.height / this.pixelSize;
      this.map = [];
      this.context.fillStyle = 'white';
      this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        temp = [];
        for (j = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (Math.random() >= this.rand) {
            cell = new Cell();
            cell.draw(this.context, i, j, this.pixelSize);
          } else {
            cell = null;
          }
          temp.push(cell);
        }
        this.map.push(temp);
      }
    }

    Canvas.prototype.nextStep = function() {
      var cell, i, j, neighbours, nextMap, parents, temp, _i, _j, _ref, _ref1;
      this.context.fillStyle = 'white';
      this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
      nextMap = [];
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        temp = [];
        for (j = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          parents = this.lookAround(i, j);
          neighbours = parents.length;
          if ((neighbours === 2 || neighbours === 3) && (this.map[i][j] != null)) {
            this.map[i][j].draw(this.context, i, j, this.pixelSize);
            temp.push(this.map[i][j]);
          } else if (neighbours === 3 && !(this.map[i][j] != null)) {
            cell = new Cell(parents);
            cell.draw(this.context, i, j, this.pixelSize);
            temp.push(cell);
          } else {
            temp.push(null);
          }
        }
        nextMap.push(temp);
      }
      this.map = nextMap.slice(0);
      return nextMap = null;
    };

    Canvas.prototype.lookAround = function(x, y) {
      var i, j, parents, _i, _j;
      parents = [];
      for (i = _i = -1; _i <= 1; i = ++_i) {
        for (j = _j = -1; _j <= 1; j = ++_j) {
          if (!(i === 0 && j === 0) && x + i >= 0 && x + i <= this.width && y + j >= 0 && y + j <= this.height) {
            if (this.map[x + i][y + j] != null) {
              parents.push(this.map[x + i][y + j]);
            }
          }
        }
      }
      return parents;
    };

    return Canvas;

  })();

}).call(this);
